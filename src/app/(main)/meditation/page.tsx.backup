"use client";

import React, { useState, useEffect } from 'react';
import { useLocalStorage } from '@/hooks/useLocalStorage';
import { generateMeditationScript } from '@/lib/api/ai';
import { MeditationInput, MeditationScript, MeditationRecommendation } from '@/types/ai';
import { MoodInput } from '@/components/meditation/MoodInput';
import { GuidedMeditationPlayer } from '@/components/meditation/GuidedMeditationPlayer';
import { BreathingOrb } from '@/components/meditation/BreathingOrb';
import { EvolvingBreathingOrb } from '@/components/meditation/EvolvingBreathingOrb';
import { MeditationRecommendations } from '@/components/meditation/MeditationRecommendations';
import { PersonalizedAffirmations } from '@/components/ai/PersonalizedAffirmations';
import { MeditationCard, MeditationButton, StatBox } from '@/components/ui/MeditationCard';

// Types for meditation features
interface MeditationSession {
  id: string;
  name: string;
  duration: number; // in minutes
  type: 'guided' | 'timer' | 'breathing';
  description: string;
}

interface SessionStats {
  streak: number;
  lastSession: string | null;
  totalSessions: number;
  totalMinutes: number;
  favoriteStyle?: string;
  averageRating?: number;
}

// Sample meditation techniques
const MEDITATION_TECHNIQUES: MeditationSession[] = [
  {
    id: 'mindfulness-5',
    name: 'Mindfulness Meditation',
    duration: 5,
    type: 'guided',
    description: 'A gentle introduction to mindfulness practice with breath awareness.'
  },
  {
    id: 'breathing-box',
    name: 'Box Breathing',
    duration: 10,
    type: 'breathing',
    description: 'Systematic 4-4-4-4 breathing pattern for stress relief and focus.'
  },
  {
    id: 'body-scan',
    name: 'Body Scan Meditation',
    duration: 15,
    type: 'guided',
    description: 'Progressive relaxation through mindful body awareness.'
  },
  {
    id: 'loving-kindness',
    name: 'Loving Kindness',
    duration: 12,
    type: 'guided',
    description: 'Cultivate compassion and positive emotions toward self and others.'
  }
];

export default function MeditationPage() {
  const [selectedSession, setSelectedSession] = useState<MeditationSession | null>(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const [timeRemaining, setTimeRemaining] = useState(0);
  const [customDuration, setCustomDuration] = useState(10);
  
  // Wearables integration state
  const [connectedWearable, setConnectedWearable] = useState<'apple' | 'android' | 'other' | null>(null);
  const [bioFeedback, setBioFeedback] = useState({
    bpm: 72,
    hrv: 35,
    breaths: 12,
    stress: 25
  });
  const [showWearableOptions, setShowWearableOptions] = useState(false);
  
  // ✨ guided meditation state
  const [showMoodInput, setShowMoodInput] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedScript, setGeneratedScript] = useState<MeditationScript | null>(null);
  const [showPlayer, setShowPlayer] = useState(false);
  
  // State for affirmations
  const [selectedAffirmation, setSelectedAffirmation] = useState<any>(null);
  const [userProfile, setUserProfile] = useState({
    experience: 'beginner' as 'beginner' | 'intermediate' | 'advanced',
    preferredTone: 'gentle' as 'gentle' | 'empowering' | 'calming' | 'energizing',
    goals: ['stress relief', 'better sleep'],
    challenges: []
  });

  // Local storage for session tracking
  const [sessionStats, setSessionStats] = useLocalStorage<SessionStats>('meditation_stats', {
    streak: 0,
    lastSession: null,
    totalSessions: 0,
    totalMinutes: 0,
    favoriteStyle: undefined,
    averageRating: undefined
  });

  // Timer logic
  useEffect(() => {
    let interval: NodeJS.Timeout | null = null;
    
    if (isPlaying && timeRemaining > 0) {
      interval = setInterval(() => {
        setTimeRemaining(time => {
          if (time <= 1) {
            setIsPlaying(false);
            console.log('Session completed - triggering handleSessionComplete');
            handleSessionComplete();
            return 0;
          }
          return time - 1;
        });
      }, 1000);
    } else if (!isPlaying && interval) {
      clearInterval(interval);
    }
    
    return () => {
      if (interval) clearInterval(interval);
    };
  }, [isPlaying, timeRemaining]);

  const handleSessionComplete = () => {
    console.log('handleSessionComplete called');
    console.log('Current sessionStats:', sessionStats);
    
    const today = new Date().toDateString();
    const lastSessionDate = sessionStats.lastSession;
    
    console.log('Today:', today, 'Last session:', lastSessionDate);
    
    // Calculate streak
    let newStreak = sessionStats.streak;
    if (lastSessionDate) {
      const yesterday = new Date();
      yesterday.setDate(yesterday.getDate() - 1);
      
      if (lastSessionDate === yesterday.toDateString()) {
        newStreak += 1; // Continue streak
      } else if (lastSessionDate !== today) {
        newStreak = 1; // Start new streak
      }
    } else {
      newStreak = 1; // First session
    }
    
    const sessionDuration = selectedSession?.duration || Math.floor((generatedScript?.totalDuration || 0) / 60) || 5; // Default 5 min
    
    const newStats = {
      streak: newStreak,
      lastSession: today,
      totalSessions: sessionStats.totalSessions + 1,
      totalMinutes: sessionStats.totalMinutes + sessionDuration,
      favoriteStyle: sessionStats.favoriteStyle,
      averageRating: sessionStats.averageRating
    };
    
    console.log('Setting new stats:', newStats);
    setSessionStats(newStats);
    
    // Verify localStorage was updated
    setTimeout(() => {
      const stored = localStorage.getItem('meditation_stats');
      console.log('Stored in localStorage:', stored);
    }, 100);
  };

  const startSession = (session: MeditationSession) => {
    setSelectedSession(session);
    setTimeRemaining(session.duration * 60);
    setIsPlaying(true);
  };

  const handleAIGenerate = async (input: MeditationInput) => {
    setIsGenerating(true);
    try {
      const script = await generateMeditationScript(input);
      setGeneratedScript(script);
      setShowMoodInput(false);
      setShowPlayer(true);
    } catch (error) {
      console.error('Failed to generate meditation script:', error);
      // TODO: Show error message to user
    } finally {
      setIsGenerating(false);
    }
  };

  const handlePlayerComplete = () => {
    setShowPlayer(false);
    setGeneratedScript(null);
    handleSessionComplete();
  };

  const handlePlayerExit = () => {
    setShowPlayer(false);
    setGeneratedScript(null);
    setSelectedSession(null);
  };

  const handleRecommendationSelect = (recommendation: MeditationRecommendation) => {
    // Convert recommendation to a meditation input for AI generation
    const meditationInput: MeditationInput = {
      mood: recommendation.personalizedFor?.mood || 'neutral',
      goal: recommendation.description,
      duration: recommendation.duration,
      experience: recommendation.personalizedFor?.experience || 'beginner',
      style: recommendation.style as any,
      timeOfDay: recommendation.timeOfDay || getTimeOfDay()
    };
    
    handleAIGenerate(meditationInput);
  };

  const getTimeOfDay = (): 'morning' | 'afternoon' | 'evening' | 'night' => {
    const hour = new Date().getHours();
    if (hour < 12) return 'morning';
    if (hour < 17) return 'afternoon';
    if (hour < 21) return 'evening';
    return 'night';
  };

  const startCustomTimer = () => {
    const customSession: MeditationSession = {
      id: 'custom-timer',
      name: 'Custom Timer',
      duration: customDuration,
      type: 'timer',
      description: 'Personal meditation timer'
    };
    startSession(customSession);
  };

  const togglePlayPause = () => {
    setIsPlaying(!isPlaying);
  };

  const resetTimer = () => {
    setIsPlaying(false);
    setTimeRemaining(selectedSession?.duration ? selectedSession.duration * 60 : 0);
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  const formatTimeForSpeech = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    if (mins === 0) {
      return `${secs} seconds`;
    } else if (secs === 0) {
      return `${mins} ${mins === 1 ? 'minute' : 'minutes'}`;
    } else {
      return `${mins} ${mins === 1 ? 'minute' : 'minutes'} and ${secs} seconds`;
    }
  };

  // Wearables functions
  const connectWearable = (type: 'apple' | 'android' | 'other') => {
    setConnectedWearable(type);
    setShowWearableOptions(false);
    
    // Simulate connection success
    console.log(`Connected to ${type} wearable`);
    
    // Start simulated biofeedback
    startBioFeedbackSimulation();
  };

  const disconnectWearable = () => {
    setConnectedWearable(null);
    setBioFeedback({ bpm: 72, hrv: 35, breaths: 12, stress: 25 });
  };

  const startBioFeedbackSimulation = () => {
    // Simulate real-time biofeedback data updates
    const interval = setInterval(() => {
      if (!connectedWearable) {
        clearInterval(interval);
        return;
      }
      
      setBioFeedback(prev => ({
        bpm: Math.max(60, Math.min(100, prev.bpm + (Math.random() - 0.5) * 4)),
        hrv: Math.max(20, Math.min(60, prev.hrv + (Math.random() - 0.5) * 6)),
        breaths: Math.max(8, Math.min(20, prev.breaths + (Math.random() - 0.5) * 2)),
        stress: Math.max(0, Math.min(100, prev.stress + (Math.random() - 0.5) * 8))
      }));
    }, 2000);

    // Clean up interval after 5 minutes or when component unmounts
    setTimeout(() => clearInterval(interval), 300000);
  };

  // Show AI meditation player if generated
  if (showPlayer && generatedScript) {
    return (
      <GuidedMeditationPlayer
        script={generatedScript}
        onComplete={handlePlayerComplete}
        onExit={handlePlayerExit}
      />
    );
  }

  // Show mood input for ✨ guided meditation
  if (showMoodInput) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-indigo-50 py-8">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-8">
            <button
              onClick={() => setShowMoodInput(false)}
              className="text-gray-600 hover:text-gray-800 mb-4"
            >
              ← Back to Meditation Center
            </button>
            <h1 className="text-4xl font-bold text-gray-900 mb-4">✨ Guided Meditation</h1>
            <p className="text-lg text-gray-600 max-w-2xl mx-auto">
              Tell me how you're feeling, and I'll create a personalized meditation just for you.
            </p>
          </div>
          
          <MoodInput onGenerate={handleAIGenerate} isGenerating={isGenerating} />
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 via-blue-50/20 to-indigo-50/30 dark:from-gray-900 dark:via-gray-900 dark:to-gray-800 py-8">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="text-center mb-12">
          <h1 className="text-large-title text-gray-900 dark:text-white mb-4">Meditation Center</h1>
          <p className="text-headline text-gray-600 dark:text-gray-300 max-w-2xl mx-auto">
            Find inner peace and enhance your yoga practice with guided meditations and breathing exercises.
          </p>
        </div>

        {/* ✨ Powered Recommendations Section */}
        <div className="mb-8">
          <MeditationCard variant="elevated" className="p-8">
            <h2 className="text-title2 mb-4 text-gray-900 dark:text-white">Recommended for You</h2>
            <p className="text-subhead text-gray-600 dark:text-gray-300 mb-6">☀️ Good afternoon! Perfect time for a mindful break:</p>
            <div className="space-y-4">
              <div className="border border-gray-100 dark:border-gray-600 rounded-2xl p-6 hover:shadow-md transition-all cursor-pointer hover:bg-gray-50/50 dark:hover:bg-gray-700">
                <div className="flex justify-between items-start mb-3">
                  <h3 className="text-title3 text-gray-900 dark:text-white">Stress Relief Breathing</h3>
                  <div className="flex items-center gap-3">
                    <span className="bg-blue-100 dark:bg-blue-800 text-blue-800 dark:text-blue-200 text-caption1 px-3 py-1 rounded-full font-medium">12 min</span>
                    <span className="text-caption1 text-yellow-600 dark:text-yellow-400 font-medium">70% match</span>
                  </div>
                </div>
                <p className="text-subhead text-gray-600 dark:text-gray-300 mb-4">Calm your mind with focused breathing</p>
                <div className="flex justify-between items-center">
                  <div className="flex flex-wrap gap-2">
                    <span className="bg-gray-100 dark:bg-gray-600 text-gray-700 dark:text-gray-300 text-caption2 px-2 py-1 rounded-lg">stress-relief</span>
                    <span className="bg-gray-100 dark:bg-gray-600 text-gray-700 dark:text-gray-300 text-caption2 px-2 py-1 rounded-lg">breathing</span>
                  </div>
                  <MeditationButton variant="accent" size="sm">
                    Start Session
                  </MeditationButton>
                </div>
                <div className="mt-4 pt-4 border-t border-gray-100 dark:border-gray-600">
                  <p className="text-caption1 text-gray-500 dark:text-gray-400">
                    💡 <strong>Why this?</strong> A reliable practice for any time of day
                  </p>
                </div>
              </div>
            </div>
            <div className="mt-6 text-center">
              <button className="text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 text-subhead font-medium">✨ Get more recommendations</button>
            </div>
          </MeditationCard>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Left Container (Guided Sessions) */}
          <MeditationCard variant="elevated" className="p-8">
            <h2 className="text-title1 mb-8 text-gray-900 dark:text-white">Guided Sessions</h2>
            <div className="space-y-6">
              {MEDITATION_TECHNIQUES.map((session) => (
                <div
                  key={session.id}
                  className="border border-gray-100 dark:border-gray-600 rounded-2xl p-6 hover:shadow-lg transition-all cursor-pointer hover:bg-gray-50/50 dark:hover:bg-gray-700/50"
                  onClick={() => startSession(session)}
                >
                  <div className="flex justify-between items-start mb-3">
                    <h3 className="text-title3 text-gray-900 dark:text-white">{session.name}</h3>
                    <span className="bg-purple-100 dark:bg-purple-800 text-purple-800 dark:text-purple-200 text-footnote px-3 py-1 rounded-full font-medium">
                      {session.duration} min
                    </span>
                  </div>
                  <p className="text-subhead text-gray-600 dark:text-gray-300 mb-4">{session.description}</p>
                  <div className="flex justify-between items-center">
                    <span className="text-caption1 text-gray-500 dark:text-gray-400 capitalize bg-gray-100 dark:bg-gray-600 px-2 py-1 rounded-lg">{session.type}</span>
                    <MeditationButton variant="primary" size="sm">
                      Start Session
                    </MeditationButton>
                  </div>
                </div>
              ))}
            </div>

            {/* Custom Timer */}
            <div className="mt-8 border-t border-gray-200 dark:border-gray-600 pt-8">
              <h3 className="text-title3 mb-6 text-gray-900 dark:text-white">Custom Timer</h3>
              <div className="flex items-center gap-4">
                <input
                  type="number"
                  min="1"
                  max="60"
                  value={customDuration}
                  onChange={(e) => setCustomDuration(parseInt(e.target.value) || 10)}
                  className="border border-gray-300 dark:border-gray-600 rounded-2xl px-4 py-3 w-20 text-center bg-white dark:bg-gray-700 text-gray-900 dark:text-white text-subhead font-medium"
                />
                <span className="text-subhead text-gray-600 dark:text-gray-300">minutes</span>
                <MeditationButton
                  onClick={startCustomTimer}
                  variant="secondary"
                  size="sm"
                >
                  Start Timer
                </MeditationButton>
              </div>
            </div>
          </MeditationCard>

          {/* Right Container (Breathing Meditation) */}
          <MeditationCard variant="elevated" className="p-8 min-h-[700px]">
            <h2 className="text-title1 mb-8 text-center text-gray-900 dark:text-white">
              {selectedSession ? selectedSession.name : 'Breathing Meditation'}
            </h2>
            
            {selectedSession ? (
              <div className="text-center">
                {/* Stats Display at Top */}
                <div className="grid grid-cols-3 gap-4 mb-8">
                  <StatBox 
                    value={Math.round(bioFeedback.bpm)} 
                    label="BPM" 
                    color="red" 
                  />
                  <StatBox 
                    value={Math.round(bioFeedback.hrv)} 
                    label="HRV" 
                    color="blue" 
                  />
                  <StatBox 
                    value={Math.round(bioFeedback.breaths)} 
                    label="Breaths" 
                    color="green" 
                  />
                </div>

                {/* User Status and Progress */}
                <div className="mb-8">
                  <div className="text-title3 text-yellow-600 mb-2">Novice Breather</div>
                  <div className="text-subhead text-gray-600 mb-4">Beginning the journey</div>
                  <div className="w-64 mx-auto h-3 bg-gray-200 rounded-full overflow-hidden">
                    <div 
                      className="h-full bg-gradient-to-r from-blue-400 to-blue-600 rounded-full transition-all duration-1000 ease-out"
                      style={{ width: `${(sessionStats.totalSessions / 5) * 100}%` }}
                    />
                  </div>
                  <div className="text-caption1 text-gray-500 mt-2">
                    {sessionStats.totalSessions}/5 sessions
                  </div>
                </div>

                {/* Timer Display */}
                <div className="mb-8">
                  <div className="text-4xl font-mono font-bold text-purple-600 dark:text-purple-400 mb-2">
                    {formatTime(timeRemaining)}
                  </div>
                  <div className="text-subhead text-gray-600 dark:text-gray-300">
                    {selectedSession.duration} minute session
                  </div>
                </div>

                {/* Enhanced Breathing Visualizer */}
                <div className="mb-8">
                  <EvolvingBreathingOrb
                    isActive={isPlaying}
                    sessionCount={sessionStats.totalSessions}
                    pattern={
                      selectedSession.type === 'breathing' ? {
                        name: 'Box Breathing',
                        inhale: 4,
                        hold1: 4,
                        exhale: 4,
                        hold2: 4,
                        description: '4-4-4-4 pattern for stress relief and focus'
                      } : {
                        name: 'Natural Breathing',
                        inhale: 4,
                        exhale: 4,
                        description: 'Natural breathing rhythm'
                      }
                    }
                    onBreathCycle={(phase) => {
                      // Optional: Add breath cycle callbacks for additional features
                    }}
                    onEvolution={(stage) => {
                      // Optional: Handle evolution events
                      console.log('Evolved to:', stage.name);
                    }}
                  />
                </div>

                {/* Breathing Info */}
                <div className="mb-8 p-4 bg-blue-50 rounded-2xl">
                  <h4 className="text-headline text-gray-900 mb-2">Natural Breathing</h4>
                  <div className="flex justify-center gap-6 text-subhead">
                    <span className="text-blue-600 font-medium">In: 4s</span>
                    <span className="text-red-500 font-medium">Out: 4s</span>
                  </div>
                </div>

                {/* Control Buttons */}
                <div className="flex justify-center gap-4 mb-8">
                  <MeditationButton
                    onClick={togglePlayPause}
                    variant={isPlaying ? 'secondary' : 'primary'}
                    size="md"
                  >
                    {isPlaying ? '⏸ Pause' : '▶ Play'}
                  </MeditationButton>
                  <MeditationButton
                    onClick={resetTimer}
                    variant="secondary"
                    size="md"
                  >
                    ⏹ Reset
                  </MeditationButton>
                </div>

                {/* Bio Feedback Section */}
                <div className="border-t border-gray-200 pt-8">
                  <h3 className="text-title3 mb-6 text-center">Bio Feedback</h3>
                  
                  {!connectedWearable ? (
                    <div className="text-center">
                      <p className="text-subhead text-gray-600 mb-6">
                        Connect your wearable device to track your biometric data during meditation
                      </p>
                      <MeditationButton
                        onClick={() => setShowWearableOptions(!showWearableOptions)}
                        variant="primary"
                        size="md"
                        className="bg-gradient-to-r from-blue-500 to-blue-600"
                      >
                        Connect Wearable Device
                      </MeditationButton>
                      
                      {showWearableOptions && (
                        <div className="mt-6 space-y-3">
                          <div className="flex justify-center gap-3">
                            <MeditationButton
                              onClick={() => connectWearable('apple')}
                              variant="secondary"
                              size="sm"
                            >
                              🍎 Apple Watch
                            </MeditationButton>
                            <MeditationButton
                              onClick={() => connectWearable('android')}
                              variant="secondary"
                              size="sm"
                            >
                              🤖 Android Wear
                            </MeditationButton>
                            <MeditationButton
                              onClick={() => connectWearable('other')}
                              variant="secondary"
                              size="sm"
                            >
                              📱 Other Device
                            </MeditationButton>
                          </div>
                        </div>
                      )}
                    </div>
                  ) : (
                    <div>
                      <div className="flex items-center justify-between mb-6">
                        <div className="flex items-center gap-2 text-subhead text-green-600">
                          <span className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></span>
                          Connected to {connectedWearable === 'apple' ? 'Apple Watch' : 
                                       connectedWearable === 'android' ? 'Android Wear' : 'Other Device'}
                        </div>
                        <button
                          onClick={disconnectWearable}
                          className="text-gray-500 hover:text-gray-700 text-subhead"
                        >
                          Disconnect
                        </button>
                      </div>
                      
                      <div className="grid grid-cols-2 gap-4 mb-4">
                        <StatBox 
                          value={Math.round(bioFeedback.bpm)} 
                          label="BPM" 
                          color="red" 
                        />
                        <StatBox 
                          value={Math.round(bioFeedback.hrv)} 
                          label="HRV" 
                          color="blue" 
                        />
                        <StatBox 
                          value={Math.round(bioFeedback.breaths)} 
                          label="Breaths/min" 
                          color="green" 
                        />
                        <StatBox 
                          value={`${Math.round(bioFeedback.stress)}%`} 
                          label="Stress" 
                          color="orange" 
                        />
                      </div>
                      
                      <div className="text-center">
                        <div className="text-caption1 text-gray-500">
                          Real-time biometric feedback during your meditation practice
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            ) : (
              <div className="text-center">
                {/* Stats Display at Top */}
                <div className="grid grid-cols-3 gap-4 mb-8">
                  <StatBox 
                    value="72" 
                    label="BPM" 
                    color="red" 
                  />
                  <StatBox 
                    value="6.2" 
                    label="HRV" 
                    color="blue" 
                  />
                  <StatBox 
                    value="0" 
                    label="Breaths" 
                    color="green" 
                  />
                </div>

                {/* User Status and Progress */}
                <div className="mb-8">
                  <div className="text-title3 text-yellow-600 mb-2">Novice Breather</div>
                  <div className="text-subhead text-gray-600 mb-4">Beginning the journey</div>
                  <div className="w-64 mx-auto h-3 bg-gray-200 rounded-full overflow-hidden">
                    <div 
                      className="h-full bg-gradient-to-r from-blue-400 to-blue-600 rounded-full transition-all duration-1000 ease-out"
                      style={{ width: `${(sessionStats.totalSessions / 5) * 100}%` }}
                    />
                  </div>
                  <div className="text-caption1 text-gray-500 mt-2">
                    {sessionStats.totalSessions}/5 sessions
                  </div>
                </div>

                {/* Default Breathing Meditation when no session selected */}
                <div className="mb-8">
                  <EvolvingBreathingOrb
                    isActive={false}
                    sessionCount={sessionStats.totalSessions}
                    pattern={{
                      name: 'Natural Breathing',
                      inhale: 4,
                      exhale: 4,
                      description: 'Start with natural breathing rhythm'
                    }}
                  />
                </div>

                {/* Breathing Info */}
                <div className="mb-8 p-4 bg-blue-50 rounded-2xl">
                  <h4 className="text-headline text-gray-900 mb-2">Natural Breathing</h4>
                  <div className="flex justify-center gap-6 text-subhead">
                    <span className="text-blue-600 font-medium">In: 4s</span>
                    <span className="text-red-500 font-medium">Out: 4s</span>
                  </div>
                </div>
                
                {/* Bio Feedback Section for default state */}
                <div className="border-t border-gray-200 pt-8">
                  <h3 className="text-title3 mb-6 text-center">Bio Feedback</h3>
                  
                  {!connectedWearable ? (
                    <div className="text-center">
                      <p className="text-subhead text-gray-500 mb-6">
                        Connect your wearable to track biometric data
                      </p>
                      <MeditationButton
                        onClick={() => setShowWearableOptions(!showWearableOptions)}
                        variant="primary"
                        size="md"
                        className="bg-gradient-to-r from-blue-500 to-blue-600"
                      >
                        Connect Wearable Device
                      </MeditationButton>
                      
                      {showWearableOptions && (
                        <div className="mt-6 space-y-3">
                          <div className="flex justify-center gap-3">
                            <MeditationButton
                              onClick={() => connectWearable('apple')}
                              variant="secondary"
                              size="sm"
                            >
                              🍎 Apple Watch
                            </MeditationButton>
                            <MeditationButton
                              onClick={() => connectWearable('android')}
                              variant="secondary"
                              size="sm"
                            >
                              🤖 Android Wear
                            </MeditationButton>
                            <MeditationButton
                              onClick={() => connectWearable('other')}
                              variant="secondary"
                              size="sm"
                            >
                              📱 Other Device
                            </MeditationButton>
                          </div>
                        </div>
                      )}
                    </div>
                  ) : (
                    <div>
                      <div className="flex items-center justify-between mb-6">
                        <div className="flex items-center gap-2 text-subhead text-green-600">
                          <span className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></span>
                          Connected to {connectedWearable === 'apple' ? 'Apple Watch' : 
                                       connectedWearable === 'android' ? 'Android Wear' : 'Other Device'}
                        </div>
                        <button
                          onClick={disconnectWearable}
                          className="text-gray-500 hover:text-gray-700 text-subhead"
                        >
                          Disconnect
                        </button>
                      </div>
                      
                      <div className="grid grid-cols-2 gap-4 mb-4">
                        <StatBox 
                          value={Math.round(bioFeedback.bpm)} 
                          label="BPM" 
                          color="red" 
                        />
                        <StatBox 
                          value={Math.round(bioFeedback.hrv)} 
                          label="HRV" 
                          color="blue" 
                        />
                        <StatBox 
                          value={Math.round(bioFeedback.breaths)} 
                          label="Breaths/min" 
                          color="green" 
                        />
                        <StatBox 
                          value={`${Math.round(bioFeedback.stress)}%`} 
                          label="Stress" 
                          color="orange" 
                        />
                      </div>
                    </div>
                  )}
                </div>

                <div className="mt-8 text-gray-500 space-y-2">
                  <p className="text-headline font-medium">Ready to Begin Your Journey</p>
                  <p className="text-subhead">
                    Select a session from the left to start your breathing meditation practice
                  </p>
                  <div className="mt-6 p-6 bg-blue-50 rounded-2xl">
                    <p className="text-caption1 text-blue-700">
                      <strong>🌟 Evolution System:</strong> Complete sessions to unlock new breathing orb stages and features!
                    </p>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Personalized Affirmations Section - Temporarily commented */}
        {/*<PersonalizedAffirmations
          context="meditation"
          userProfile={userProfile}
          sessionData={{
            mood: 'calm',
            timeOfDay: getTimeOfDay(),
            focusArea: 'mindfulness',
            duration: customDuration
          }}
          onAffirmationSelect={setSelectedAffirmation}
          className="mb-8"
        />*/}

        {/* Additional Features */}
        <div className="mt-12 grid grid-cols-1 md:grid-cols-2 gap-8">
          <MeditationCard className="p-8">
            <h3 className="text-title2 mb-6">Coming Soon</h3>
            <ul className="space-y-4 text-gray-700">
              <li className="flex items-center">
                <span className="text-green-500 mr-3 text-lg">✓</span>
                <span className="text-subhead">Audio-guided meditation tracks</span>
              </li>
              <li className="flex items-center">
                <span className="text-green-500 mr-3 text-lg">✓</span>
                <span className="text-subhead">Progress visualization and insights</span>
              </li>
              <li className="flex items-center">
                <span className="text-blue-500 mr-3 text-lg">○</span>
                <span className="text-subhead">Meditation challenges and programs</span>
              </li>
              <li className="flex items-center">
                <span className="text-blue-500 mr-3 text-lg">○</span>
                <span className="text-subhead">Community meditation sessions</span>
              </li>
              <li className="flex items-center">
                <span className="text-blue-500 mr-3 text-lg">○</span>
                <span className="text-subhead">Integration with practice journal</span>
              </li>
            </ul>
          </MeditationCard>
          
          <MeditationCard className="p-8">
            <h3 className="text-title2 mb-6">Meditation Benefits</h3>
            <ul className="space-y-4 text-gray-700">
              <li className="flex items-start">
                <span className="text-purple-500 mr-3 text-lg">🧠</span>
                <div>
                  <strong className="text-headline">Mental Clarity:</strong>
                  <span className="text-subhead text-gray-600 ml-1">Improve focus and decision-making</span>
                </div>
              </li>
              <li className="flex items-start">
                <span className="text-purple-500 mr-3 text-lg">❤️</span>
                <div>
                  <strong className="text-headline">Stress Relief:</strong>
                  <span className="text-subhead text-gray-600 ml-1">Reduce anxiety and promote relaxation</span>
                </div>
              </li>
              <li className="flex items-start">
                <span className="text-purple-500 mr-3 text-lg">😴</span>
                <div>
                  <strong className="text-headline">Better Sleep:</strong>
                  <span className="text-subhead text-gray-600 ml-1">Improve sleep quality and rest</span>
                </div>
              </li>
              <li className="flex items-start">
                <span className="text-purple-500 mr-3 text-lg">⚡</span>
                <div>
                  <strong className="text-headline">Emotional Balance:</strong>
                  <span className="text-subhead text-gray-600 ml-1">Develop resilience and calm</span>
                </div>
              </li>
            </ul>
          </MeditationCard>
        </div>
      </div>
    </div>
  );
}